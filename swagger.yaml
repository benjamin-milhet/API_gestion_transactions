swagger: '2.0'
info:
  title: API de gestion de transactions
  description: >-
    Cette API développée en python a pour but de pouvoir gérer des transactions
    entre des personnes.
    ### Fonctionnalités:
     - Enregistrer une transaction.
     - Afficher une liste de toutes les transactions dans l’ordre chronologique.
     - Afficher une liste des transactions dans l’ordre chronologique liées à une personne.
     - Afficher le solde du compte de la personne.
     - Importer des données depuis un fichier csv.
     - Vérification des transactions grâce à un hashage SHA-256
  version: 'v1.0.0'

host: 127.0.0.1:5000

schemes:
  - http
consumes:
  - application/x-www-form-urlencoded
  - multipart/form-data
produces:
  - application/json
paths:
  /:
    get:
      summary: Accueil
      description: Retourne "Hello, world!"
      responses:
        200:
          description: Succès
          schema:
            type: string
            example: "Hello, world!"
  /getTransactions:
    get:
      summary: Récupérer les transactions
      description: Retourne les transactions classées par date
      responses:
        200:
          description: L'ensemble des transactions
          schema:
            type: string
            example: "('Benjamin', 'Lucas', '01/30/2023, 21:00:42', 100, '654a974f6692753af64d91072c27d8dd1ca2d9952321a2ce2fc3f6c03d905954')"
          
  /addTransaction:
    post:
      summary: Ajouter une transaction
      description: Ajouter une transaction entre deux personnes avec un solde donné
      parameters:
        - in: formData
          name: P1
          description: Nom de la première personne
          type: string
          required: true
        - in: formData
          name: P2
          description: Nom de la deuxième personne
          type: string
          required: true
        - in: formData
          name: s
          description: Solde de la transaction
          type: integer
          required: true
      responses:
        200:
          description: L'ensemble des transactions après l'ajout
          schema:
            type: string
            example: "('Benjamin', 'Lucas', '01/30/2023, 21:00:42', 100, '654a974f6692753af64d91072c27d8dd1ca2d9952321a2ce2fc3f6c03d905954')"
  /chargerFichier:
    post:
      summary: Charger un fichier
      description: Charger un fichier CSV contenant les informations des personnes
      parameters:
        - in: formData
          name: fichierPersonne
          description: Charger le fichier contenant les personnes
          type: string
          required: true
        - in: formData
          name: fichierTransaction
          description: Charger le fichier contenant les transactions
          type: string
          required: true
        - in: formData
          name: delimiter
          description: Délimiteur utilisé dans le fichier
          type: string
          required: true
      responses:
        200:
          description: Le nombre de données chargé pour chaque fichier
          schema:
            type: string
            example: "Nombre de personne chargée : 5"
  /getPersonne:
    get:
      summary: Récupérer les informations d'une personne
      description: Récupérer les transactions d'une personne en fonction de son nom
      parameters:
        - in: formData
          name: nom
          description: Nom de la personne
          type: string
          required: true
      responses:
        200:
          description: La description d'une personne et toutes ses transactions
          schema:
            type: string
            example: "name: Benjamin - solde: 373 ('Benjamin', 'Lucas', '01/30/2023, 21:00:42', 100, '654a974f6692753af64d91072c27d8dd1ca2d9952321a2ce2fc3f6c03d905954')"
  /getSoldePersonne:
    get:
      summary: Récupérer le solde d'une personne
      description: Récupérer le solde d'une personne en fonction de son nom
      parameters:
        - in: formData
          name: nom
          description: Nom de la personne
          type: string
          required: true
      responses:
        200:
          description: Le solde de la personne
          schema:
            type: integer
            example: 373
  /verifierTransaction:
    get:
      summary: Vérifier le hashage des transactions existentes
      description: Parcours l'ensemble des transactions et recalcule leurs hashs. Puis one le compare avec celui stockées. 
      responses:
        200:
          description: L'ensemble des transactions avec un problème de hash
          schema:
            type: string
            example: "('Benjamin', 'Lucas', '01/30/2023, 21:00:42', 100, '654a974f6692753af64d91072c27d8dd1ca2d9952321a2ce2fc3f6c03d905954') : Transaction non valide !"
